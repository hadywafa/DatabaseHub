// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using EF_AdvectureWorks.Models;
using EF_AdvectureWorks.Models.dboSchema;
using EF_AdvectureWorks.Models.HumanResourcesSchema;
using EF_AdvectureWorks.Models.PersonSchema;
using EF_AdvectureWorks.Models.ProductionSchema;
using EF_AdvectureWorks.Models.PurchasingSchema;
using EF_AdvectureWorks.Models.SalesSchema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace EF_AdvectureWorks.Models.Configurations
{
    public partial class SalesOrderHeaderConfiguration : IEntityTypeConfiguration<SalesOrderHeader>
    {
        public void Configure(EntityTypeBuilder<SalesOrderHeader> entity)
        {
            entity.HasKey(e => e.SalesOrderId).HasName("PK_SalesOrderHeader_SalesOrderID");

            entity.ToTable("SalesOrderHeader", "Sales", tb =>
            {
                tb.HasComment("General sales order information.");
                tb.HasTrigger("uSalesOrderHeader");
            });

            entity.HasIndex(e => e.SalesOrderNumber, "AK_SalesOrderHeader_SalesOrderNumber").IsUnique();

            entity.HasIndex(e => e.Rowguid, "AK_SalesOrderHeader_rowguid").IsUnique();

            entity.HasIndex(e => e.CustomerId, "IX_SalesOrderHeader_CustomerID");

            entity.HasIndex(e => e.SalesPersonId, "IX_SalesOrderHeader_SalesPersonID");

            entity.Property(e => e.SalesOrderId)
            .HasComment("Primary key.")
            .HasColumnName("SalesOrderID");
            entity.Property(e => e.AccountNumber)
            .HasMaxLength(15)
            .HasComment("Financial accounting number reference.");
            entity.Property(e => e.BillToAddressId)
            .HasComment("Customer billing address. Foreign key to Address.AddressID.")
            .HasColumnName("BillToAddressID");
            entity.Property(e => e.Comment)
            .HasMaxLength(128)
            .HasComment("Sales representative comments.");
            entity.Property(e => e.CreditCardApprovalCode)
            .HasMaxLength(15)
            .IsUnicode(false)
            .HasComment("Approval code provided by the credit card company.");
            entity.Property(e => e.CreditCardId)
            .HasComment("Credit card identification number. Foreign key to CreditCard.CreditCardID.")
            .HasColumnName("CreditCardID");
            entity.Property(e => e.CurrencyRateId)
            .HasComment("Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.")
            .HasColumnName("CurrencyRateID");
            entity.Property(e => e.CustomerId)
            .HasComment("Customer identification number. Foreign key to Customer.BusinessEntityID.")
            .HasColumnName("CustomerID");
            entity.Property(e => e.DueDate)
            .HasComment("Date the order is due to the customer.")
            .HasColumnType("datetime");
            entity.Property(e => e.Freight)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Shipping cost.")
            .HasColumnType("money");
            entity.Property(e => e.ModifiedDate)
            .HasDefaultValueSql("(getdate())")
            .HasComment("Date and time the record was last updated.")
            .HasColumnType("datetime");
            entity.Property(e => e.OnlineOrderFlag)
            .IsRequired()
            .HasDefaultValueSql("((1))")
            .HasComment("0 = Order placed by sales person. 1 = Order placed online by customer.");
            entity.Property(e => e.OrderDate)
            .HasDefaultValueSql("(getdate())")
            .HasComment("Dates the sales order was created.")
            .HasColumnType("datetime");
            entity.Property(e => e.PurchaseOrderNumber)
            .HasMaxLength(25)
            .HasComment("Customer purchase order number reference. ");
            entity.Property(e => e.RevisionNumber).HasComment("Incremental number to track changes to the sales order over time.");
            entity.Property(e => e.Rowguid)
            .HasDefaultValueSql("(newid())")
            .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.")
            .HasColumnName("rowguid");
            entity.Property(e => e.SalesOrderNumber)
            .HasMaxLength(25)
            .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))", false)
            .HasComment("Unique sales order identification number.");
            entity.Property(e => e.SalesPersonId)
            .HasComment("Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.")
            .HasColumnName("SalesPersonID");
            entity.Property(e => e.ShipDate)
            .HasComment("Date the order was shipped to the customer.")
            .HasColumnType("datetime");
            entity.Property(e => e.ShipMethodId)
            .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.")
            .HasColumnName("ShipMethodID");
            entity.Property(e => e.ShipToAddressId)
            .HasComment("Customer shipping address. Foreign key to Address.AddressID.")
            .HasColumnName("ShipToAddressID");
            entity.Property(e => e.Status)
            .HasDefaultValueSql("((1))")
            .HasComment("Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");
            entity.Property(e => e.SubTotal)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.")
            .HasColumnType("money");
            entity.Property(e => e.TaxAmt)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Tax amount.")
            .HasColumnType("money");
            entity.Property(e => e.TerritoryId)
            .HasComment("Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.")
            .HasColumnName("TerritoryID");
            entity.Property(e => e.TotalDue)
            .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))", false)
            .HasComment("Total due from customer. Computed as Subtotal + TaxAmt + Freight.")
            .HasColumnType("money");

            entity.HasOne(d => d.BillToAddress).WithMany(p => p.SalesOrderHeaderBillToAddress)
            .HasForeignKey(d => d.BillToAddressId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.CreditCard).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CreditCardId);

            entity.HasOne(d => d.CurrencyRate).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CurrencyRateId);

            entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader)
            .HasForeignKey(d => d.CustomerId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.SalesPersonId);

            entity.HasOne(d => d.ShipMethod).WithMany(p => p.SalesOrderHeader)
            .HasForeignKey(d => d.ShipMethodId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.ShipToAddress).WithMany(p => p.SalesOrderHeaderShipToAddress)
            .HasForeignKey(d => d.ShipToAddressId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Territory).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.TerritoryId);

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<SalesOrderHeader> entity);
    }
}

// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using EF_AdvectureWorks.Models;
using EF_AdvectureWorks.Models.dboSchema;
using EF_AdvectureWorks.Models.HumanResourcesSchema;
using EF_AdvectureWorks.Models.PersonSchema;
using EF_AdvectureWorks.Models.ProductionSchema;
using EF_AdvectureWorks.Models.PurchasingSchema;
using EF_AdvectureWorks.Models.SalesSchema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace EF_AdvectureWorks.Models.Configurations
{
    public partial class PurchaseOrderHeaderConfiguration : IEntityTypeConfiguration<PurchaseOrderHeader>
    {
        public void Configure(EntityTypeBuilder<PurchaseOrderHeader> entity)
        {
            entity.HasKey(e => e.PurchaseOrderId).HasName("PK_PurchaseOrderHeader_PurchaseOrderID");

            entity.ToTable("PurchaseOrderHeader", "Purchasing", tb =>
            {
                tb.HasComment("General purchase order information. See PurchaseOrderDetail.");
                tb.HasTrigger("uPurchaseOrderHeader");
            });

            entity.HasIndex(e => e.EmployeeId, "IX_PurchaseOrderHeader_EmployeeID");

            entity.HasIndex(e => e.VendorId, "IX_PurchaseOrderHeader_VendorID");

            entity.Property(e => e.PurchaseOrderId)
            .HasComment("Primary key.")
            .HasColumnName("PurchaseOrderID");
            entity.Property(e => e.EmployeeId)
            .HasComment("Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.")
            .HasColumnName("EmployeeID");
            entity.Property(e => e.Freight)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Shipping cost.")
            .HasColumnType("money");
            entity.Property(e => e.ModifiedDate)
            .HasDefaultValueSql("(getdate())")
            .HasComment("Date and time the record was last updated.")
            .HasColumnType("datetime");
            entity.Property(e => e.OrderDate)
            .HasDefaultValueSql("(getdate())")
            .HasComment("Purchase order creation date.")
            .HasColumnType("datetime");
            entity.Property(e => e.RevisionNumber).HasComment("Incremental number to track changes to the purchase order over time.");
            entity.Property(e => e.ShipDate)
            .HasComment("Estimated shipment date from the vendor.")
            .HasColumnType("datetime");
            entity.Property(e => e.ShipMethodId)
            .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.")
            .HasColumnName("ShipMethodID");
            entity.Property(e => e.Status)
            .HasDefaultValueSql("((1))")
            .HasComment("Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete");
            entity.Property(e => e.SubTotal)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.")
            .HasColumnType("money");
            entity.Property(e => e.TaxAmt)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Tax amount.")
            .HasColumnType("money");
            entity.Property(e => e.TotalDue)
            .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))", true)
            .HasComment("Total due to vendor. Computed as Subtotal + TaxAmt + Freight.")
            .HasColumnType("money");
            entity.Property(e => e.VendorId)
            .HasComment("Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.")
            .HasColumnName("VendorID");

            entity.HasOne(d => d.Employee).WithMany(p => p.PurchaseOrderHeader)
            .HasForeignKey(d => d.EmployeeId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.ShipMethod).WithMany(p => p.PurchaseOrderHeader)
            .HasForeignKey(d => d.ShipMethodId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrderHeader)
            .HasForeignKey(d => d.VendorId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<PurchaseOrderHeader> entity);
    }
}

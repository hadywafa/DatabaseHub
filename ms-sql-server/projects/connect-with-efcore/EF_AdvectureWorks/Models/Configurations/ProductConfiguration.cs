// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using EF_AdvectureWorks.Models;
using EF_AdvectureWorks.Models.dboSchema;
using EF_AdvectureWorks.Models.HumanResourcesSchema;
using EF_AdvectureWorks.Models.PersonSchema;
using EF_AdvectureWorks.Models.ProductionSchema;
using EF_AdvectureWorks.Models.PurchasingSchema;
using EF_AdvectureWorks.Models.SalesSchema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace EF_AdvectureWorks.Models.Configurations
{
    public partial class ProductConfiguration : IEntityTypeConfiguration<Product>
    {
        public void Configure(EntityTypeBuilder<Product> entity)
        {
            entity.HasKey(e => e.ProductId).HasName("PK_Product_ProductID");

            entity.ToTable("Product", "Production", tb => tb.HasComment("Products sold or used in the manfacturing of sold products."));

            entity.HasIndex(e => e.Name, "AK_Product_Name").IsUnique();

            entity.HasIndex(e => e.ProductNumber, "AK_Product_ProductNumber").IsUnique();

            entity.HasIndex(e => e.Rowguid, "AK_Product_rowguid").IsUnique();

            entity.Property(e => e.ProductId)
            .HasComment("Primary key for Product records.")
            .HasColumnName("ProductID");
            entity.Property(e => e.Class)
            .HasMaxLength(2)
            .IsFixedLength()
            .HasComment("H = High, M = Medium, L = Low");
            entity.Property(e => e.Color)
            .HasMaxLength(15)
            .HasComment("Product color.");
            entity.Property(e => e.DaysToManufacture).HasComment("Number of days required to manufacture the product.");
            entity.Property(e => e.DiscontinuedDate)
            .HasComment("Date the product was discontinued.")
            .HasColumnType("datetime");
            entity.Property(e => e.FinishedGoodsFlag)
            .IsRequired()
            .HasDefaultValueSql("((1))")
            .HasComment("0 = Product is not a salable item. 1 = Product is salable.");
            entity.Property(e => e.ListPrice)
            .HasComment("Selling price.")
            .HasColumnType("money");
            entity.Property(e => e.MakeFlag)
            .IsRequired()
            .HasDefaultValueSql("((1))")
            .HasComment("0 = Product is purchased, 1 = Product is manufactured in-house.");
            entity.Property(e => e.ModifiedDate)
            .HasDefaultValueSql("(getdate())")
            .HasComment("Date and time the record was last updated.")
            .HasColumnType("datetime");
            entity.Property(e => e.Name)
            .HasMaxLength(50)
            .HasComment("Name of the product.");
            entity.Property(e => e.ProductLine)
            .HasMaxLength(2)
            .IsFixedLength()
            .HasComment("R = Road, M = Mountain, T = Touring, S = Standard");
            entity.Property(e => e.ProductModelId)
            .HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.")
            .HasColumnName("ProductModelID");
            entity.Property(e => e.ProductNumber)
            .HasMaxLength(25)
            .HasComment("Unique product identification number.");
            entity.Property(e => e.ProductSubcategoryId)
            .HasComment("Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. ")
            .HasColumnName("ProductSubcategoryID");
            entity.Property(e => e.ReorderPoint).HasComment("Inventory level that triggers a purchase order or work order. ");
            entity.Property(e => e.Rowguid)
            .HasDefaultValueSql("(newid())")
            .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.")
            .HasColumnName("rowguid");
            entity.Property(e => e.SafetyStockLevel).HasComment("Minimum inventory quantity. ");
            entity.Property(e => e.SellEndDate)
            .HasComment("Date the product was no longer available for sale.")
            .HasColumnType("datetime");
            entity.Property(e => e.SellStartDate)
            .HasComment("Date the product was available for sale.")
            .HasColumnType("datetime");
            entity.Property(e => e.Size)
            .HasMaxLength(5)
            .HasComment("Product size.");
            entity.Property(e => e.SizeUnitMeasureCode)
            .HasMaxLength(3)
            .IsFixedLength()
            .HasComment("Unit of measure for Size column.");
            entity.Property(e => e.StandardCost)
            .HasComment("Standard cost of the product.")
            .HasColumnType("money");
            entity.Property(e => e.Style)
            .HasMaxLength(2)
            .IsFixedLength()
            .HasComment("W = Womens, M = Mens, U = Universal");
            entity.Property(e => e.Weight)
            .HasComment("Product weight.")
            .HasColumnType("decimal(8, 2)");
            entity.Property(e => e.WeightUnitMeasureCode)
            .HasMaxLength(3)
            .IsFixedLength()
            .HasComment("Unit of measure for Weight column.");

            entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelId);

            entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryId);

            entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.ProductSizeUnitMeasureCodeNavigation).HasForeignKey(d => d.SizeUnitMeasureCode);

            entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductWeightUnitMeasureCodeNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Product> entity);
    }
}

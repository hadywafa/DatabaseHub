// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using EF_AdvectureWorks.Models;
using EF_AdvectureWorks.Models.dboSchema;
using EF_AdvectureWorks.Models.HumanResourcesSchema;
using EF_AdvectureWorks.Models.PersonSchema;
using EF_AdvectureWorks.Models.ProductionSchema;
using EF_AdvectureWorks.Models.PurchasingSchema;
using EF_AdvectureWorks.Models.SalesSchema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace EF_AdvectureWorks.Models.Configurations
{
    public partial class SalesPersonConfiguration : IEntityTypeConfiguration<SalesPerson>
    {
        public void Configure(EntityTypeBuilder<SalesPerson> entity)
        {
            entity.HasKey(e => e.BusinessEntityId).HasName("PK_SalesPerson_BusinessEntityID");

            entity.ToTable("SalesPerson", "Sales", tb => tb.HasComment("Sales representative current information."));

            entity.HasIndex(e => e.Rowguid, "AK_SalesPerson_rowguid").IsUnique();

            entity.Property(e => e.BusinessEntityId)
            .ValueGeneratedNever()
            .HasComment("Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID")
            .HasColumnName("BusinessEntityID");
            entity.Property(e => e.Bonus)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Bonus due if quota is met.")
            .HasColumnType("money");
            entity.Property(e => e.CommissionPct)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Commision percent received per sale.")
            .HasColumnType("smallmoney");
            entity.Property(e => e.ModifiedDate)
            .HasDefaultValueSql("(getdate())")
            .HasComment("Date and time the record was last updated.")
            .HasColumnType("datetime");
            entity.Property(e => e.Rowguid)
            .HasDefaultValueSql("(newid())")
            .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.")
            .HasColumnName("rowguid");
            entity.Property(e => e.SalesLastYear)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Sales total of previous year.")
            .HasColumnType("money");
            entity.Property(e => e.SalesQuota)
            .HasComment("Projected yearly sales.")
            .HasColumnType("money");
            entity.Property(e => e.SalesYtd)
            .HasDefaultValueSql("((0.00))")
            .HasComment("Sales total year to date.")
            .HasColumnType("money")
            .HasColumnName("SalesYTD");
            entity.Property(e => e.TerritoryId)
            .HasComment("Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.")
            .HasColumnName("TerritoryID");

            entity.HasOne(d => d.BusinessEntity).WithOne(p => p.SalesPerson)
            .HasForeignKey<SalesPerson>(d => d.BusinessEntityId)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Territory).WithMany(p => p.SalesPerson).HasForeignKey(d => d.TerritoryId);

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<SalesPerson> entity);
    }
}
